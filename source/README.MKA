Hva er webassembly
------------------
Webassembly er et assembly lignende språk, som kan kompileres til WASM.
Wasm kan kjøres i nettleser, men også uten, f.eks. backend, og fra Node.js.
Emscripten er en LLVM C/C++ compiler som kan lage WASM filer.
Wasm filer kjører med near native speed (dvs nesten like 
fort som en C basert binærfil)
I vår docker ligger også to wasm runtimes installert, 
Wasmer og Wasmtime.  Med disse kan kjøre en wasm file utenfor nettleser.

Vårt fokus er på browser, og vi ser på to områder:
 - Kjøring av C/C++ fra javascript
 - Kjøring av javascript fra C/C++
 - DOM håndtering fra C/C++

I tillegg er det et minneområde som kan benyttes til speedy
overføring av data mellomC/C++ og javascript.

WASI/WAGI for serverless vil vi sannsynligvis stifte bekjentskap
med i nær fremtid.


Eksempler:
https://macos8.app/
https://www.pcjs.org/
https://lab.allotropia.de/wasm/ <== Libreoffice 300m teg
https://github.com/torch2424/wasmboy

https://madewithwebassembly.com/
https://webassembly.org/docs/use-cases/

// Eksempler på applikasjoner som benytter webassembly
Disney+ Amazon prime
Google Earth
Figma
VLC - Video 
Samsung Tizen player
Unreal - gaming
Unity - gaming


01_helloworld_c
---------------
Viser et enkelt helloworld (c), makefilen kan bygge til wasm, js og html.
Du kan kjøre med wasmrun, node.js eller bruke html filen som er generert
Se i Makefile filen.  Der ligger targets for å kjøre wasm filen direkte, 
bruke node.js til å kjøre vha glue filen, eller lage web prosjekt.

02_helloworld_cpp
-----------------
Viser et enkelt helloworld (c++), makefilen kan bygge til wasm, js og html.
Du kan kjøre med wasmrun, node.js eller bruke html filen som er generert

03_Cowsay_cpp
-------------
Viser et c++ program med en klasse, merk hvordan bindings exponerer c kode.
Merk at vi bruker den autogenererte js glue filen, mane har egen html file.
Vi importerer wasm i index html filen. 
Vi trigger bruk av klassen vha en knapp

Kunne vi ha kjørt denne i et node program? Hva måtte vi gjort da?

04_Initialize_event
-------------------
Se i html filen.  Der ser du at det brukes onRuntimeInitialized eventet.
Det sørger for at du ikke prøver å kjøre wasm kode før den er ferdig initialisert.
I de små programmene er initialiseringen ferdig instant, så der er det ikke
noe problem

05_Streaming
------------
Her lastes wasm filen uten å bruke javascript glue koden.  Det er raskere.
Da brukes fetch, som returnerer promise, og deretter kan du hente ut wasm 
funksjonene på resolve objektet

21_Js_from_c
------------
Her er det flere måter å kjøre javascript i fra C koden:
    - EM_JS - lage javascript kode inni C koden

Disse variantene kjører en eval():
    - emscripten_run(_async)_script - Lag js kode on the fly
    - emscripten_run_script_int - brukes her til å kalle js kode fra utsiden av C som returnerer int
    - emscripten_run_script_string - som ovenfor men retur av streng

For mer doumentasjon på dette:
https://emscripten.org/docs/api_reference/emscripten.h.html




